import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: org.hibernate.build.gradle.testing.matrix.MatrixTestingPlugin

dependencies {
    compile( project(':hibernate-core') )
    compile( libraries.dom4j )
    compile( libraries.commons_annotations )
    compile( libraries.jpa )
    compile( libraries.jta )
    compile( libraries.javassist )
    testCompile( project(':hibernate-testing') )
    testCompile( libraries.shrinkwrap_api )
    testCompile( libraries.shrinkwrap )
    testCompile( libraries.validation )
    testRuntime( libraries.validator )
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// JPA model-gen set up
////////////////////////////////////////////////////////////////////////////////////////////////////////
ext.aptDumpDir = file( "${buildDir}/tmp/apt" )

sourceSets.test {
    originalJavaSrcDirs = java.srcDirs
    ext.generatedJpaMetamodelSrcDir = file( "${buildDir}/generated-src/jpamodelgen/${name}" )
    java.srcDir generatedJpaMetamodelSrcDir
}
task generateTestJpaMetamodelClasses(type: Compile) {
    classpath = compileTestJava.classpath + configurations.hibernateJpaModelGenTool
    source = sourceSets.test.originalJavaSrcDirs
    destinationDir = aptDumpDir
    options.define(
            compilerArgs: [
                    "-proc:only",
                    "-processor", "org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor",
                    "-s", "$sourceSets.test.generatedJpaMetamodelSrcDir.absolutePath"
            ]
    );
    outputs.dir sourceSets.test.generatedJpaMetamodelSrcDir;
    doFirst {
        sourceSets.test.generatedJpaMetamodelSrcDir.mkdirs()
    }
}
// for the time being eat the annoying output from running the annotation processors
generateTestJpaMetamodelClasses.logging.captureStandardError(LogLevel.INFO)
compileTestJava.dependsOn generateTestJpaMetamodelClasses
compileTestJava.options.define(compilerArgs: ["-proc:none"])


////////////////////////////////////////////////////////////////////////////////////////////////////////
// Process 'bundle resources' for the packaging tests
////////////////////////////////////////////////////////////////////////////////////////////////////////
task copyBundleResources (type: Copy) {
	ext.bundlesTargetDir = file( "${buildDir}/bundles" )
    from file('src/test/bundles') 
    into bundlesTargetDir
    filter(ReplaceTokens, tokens: [
            buildDirName: buildDir.absolutePath,
            'db.dialect': 'org.hibernate.dialect.H2Dialect',
            'jdbc.driver': 'org.h2.Driver',
            'jdbc.user': 'sa',
            'jdbc.pass': '',
            'jdbc.url': 'jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE',
    ]);
    doFirst {
        bundlesTargetDir.mkdirs()
    }
}
processTestResources.dependsOn copyBundleResources

